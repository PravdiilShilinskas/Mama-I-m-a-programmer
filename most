#include <iostream>
using namespace std;

int** C;
int* A, B;
int timer = 0, n, m;
int* f, t, u;

int rebr(int a, int b){
  for(int i = 0; i < n; i++){
    if((A[i]==a&&B[i]==b)||(A[i]==b&&B[i]==a)){
      return i;
    };
  };
}

void dfs(int v, int p){
  u[v] = 1;
  f[v] = timer++;
  t[v] = f[v];
  for(int i = 0; i < m; i++){
    if(C[v][i]){
      int t0 = i;
      if(t0 == p){
        contue;
      };
      if(u[t0]){
        f[v] = min(f[v], t[t0]);
      }
      else{
        dfs(t0, v);
        f[v] = min(f[v], f[t0]);
        if(f[t0] > t[v]){
          cout << rebr(v, t0) << " ";
        };
      };
    };
  };
}

void matrix_smew(){
  C = new int*[m];	
  for(int i = 0; i < m; i++){
    C[i] = new int[m];
  };
  for(int l = 0; l < m; l++){
    for(int i = 0; i < n; i++){
      if(A[i] == l){
        C[l][B[i]] = 1;
      };
      if(B[i] == l){
        C[l][A[i]] = 1;
      };
    };
  };
}

int main(){
  cin >> n >> m;
  A = new int[n];
  B = new int[n];
  for(int i = 0; i < n; i++){
    cin >> A[i] >> B[i];
  };
  t = new int[m]; 
  f = new int[m]; 
  u = new int[m]; 
  matrix_smew();
  dfs(0, -1);
}
